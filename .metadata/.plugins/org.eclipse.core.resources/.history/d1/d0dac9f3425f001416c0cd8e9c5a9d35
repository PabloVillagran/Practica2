package interfaz;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

public class Lector {
	String direccion, estacion;
	int idEstacion, kilometros;
	boolean nEstacion;
	ListaEnlazada lista = null;
	BufferedReader lectorArchivo;
	
	public Lector(String direccion){
		this.direccion = direccion;
		try {
			lectorArchivo = new BufferedReader(new FileReader(direccion));
			String linea;
			while(( linea = lectorArchivo.readLine().toLowerCase())!=null){
				if(!linea.isEmpty()){
					comandos(linea);
					System.out.println(linea);
				}
			}
			lectorArchivo.close();
			
		} catch (IOException e) {
			System.out.println("Error al abrir el archivo.");
		}
	}
	
	public void comandos(String linea){
		Vagon temporal = new Vagon();
		if(linea.contains("suben")){
			if(isComando(linea)){
				String temp[] = linea.split("\\s+");
				int pasajeros= Integer.valueOf(temp[1]);
				int clase = Integer.valueOf(temp[3]);
				if(clase == 1){
					temporal = lista.BuscarClase(1);
					if((temporal.pasajeros + pasajeros) > 10 || temporal == null){
						lista.AgregarClaseI(pasajeros, idEstacion);
					}else{
						temporal.pasajeros+=pasajeros;
						temporal.idEstacion=idEstacion;
					}
				}
				if(clase == 3){
					temporal = lista.BuscarClase(3);
					if((temporal.pasajeros+ pasajeros) > 40 || temporal == null){
						lista.AgregarClaseIII(pasajeros, idEstacion);
					}else{
						temporal.pasajeros+=pasajeros;
						temporal.idEstacion=idEstacion;
					}
				}
				while(kilometros > ((lista.ContarCarbon()*100) -(lista.Tamano()*10))){
					lista.AgregarCarbon(idEstacion);
				}
			}else{
				System.out.println("comando invalido");
			}
		}else if(linea.contains("bajan")){
			if(isComando(linea)){
				String temp[] = linea.split("\\s+");
				int pasajeros= Integer.valueOf(temp[1]);
				int clase = Integer.valueOf(temp[3]);
				if(clase == 1){
					temporal = lista.BuscarClase(1);
					if((temporal.pasajeros - pasajeros)<10){
						
					}
				}
				if(clase == 3){
					
				}
			}else{
				System.out.println("comando invalido");
			}
		}else if(isEstacion(linea)){
			String temp []= linea.split("\\s+");
			estacion = temp[0];
			try{
				idEstacion = Integer.valueOf(temp[1]);
				kilometros = Integer.valueOf(temp[2].substring(0,temp[2].indexOf("k")));
			}catch(Exception e){
				System.out.println("error en id de Estacion o Kilometros");
			}
		}else{
			System.out.println("Ingreso no valido.");
		}
	}
	
	public boolean isEstacion(String linea){
		boolean isEstacion=false;
		String temporal[];
		temporal = linea.split("\\s+");
		if(temporal.length == 3 && temporal[2].contains("km")){
			isEstacion = true;
		}
		nEstacion = false;
		return isEstacion;
	}
	
	public boolean isComando(String linea){
		boolean isComando=false;
		String temp[]=linea.split("\\s+");
		if(temp.length == 4 && temp[2].contains("clase") && 
				(temp[0].contains("suben") ^ temp[0].contains("bajan"))){
			isComando=true;
		}
		return isComando;
	}
	
	public boolean finEstacion(){
		
		return true;
	}
	
}
